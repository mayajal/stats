{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/components/ui/button.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,0RACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/components/ui/card.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }"],"names":[],"mappings":";;;;;;;;;AAEA;AAEA;AAJA;;;;AAMA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/components/ui/input.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }"],"names":[],"mappings":";;;;AAEA;AAEA;AAJA;;;;AASA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,gWACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/app/data-quality/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Upload, BarChart3 } from \"lucide-react\";\nimport * as XLSX from 'xlsx';\nimport { Bar } from 'react-chartjs-2';\n//import { kolmogorovSmirnov } from 'ml-kolmogorov-smirnov';\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement, LineController } from 'chart.js';\nimport Link from 'next/link';\n\nChart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement, LineController);\n\ninterface DescriptiveStats {\n  mean: number;\n  median: number;\n  mode: number | string;\n  variance: number;\n  standardDeviation: number;\n  count: number;\n  min: number;\n  max: number;\n}\n\n// Utility: CDF for normal distribution\nfunction normalCDF(x: number, mean: number, std: number) {\n  return 0.5 * (1 + erf((x - mean) / (std * Math.sqrt(2))));\n}\n\n// Utility: Kolmogorov-Smirnov test (returns D statistic and p-value approximation)\nfunction ksTest(sample: number[]) {\n  const n = sample.length;\n  const sorted = [...sample].sort((a, b) => a - b);\n  const mean = sorted.reduce((a, b) => a + b, 0) / n;\n  const std = Math.sqrt(sorted.reduce((a, b) => a + (b - mean) ** 2, 0) / n);\n\n  let d = 0;\n  for (let i = 0; i < n; i++) {\n    const F_emp = (i + 1) / n;\n    const F_theo = normalCDF(sorted[i], mean, std);\n    d = Math.max(d, Math.abs(F_emp - F_theo));\n  }\n  // p-value approximation for large n\n  const pValue = Math.exp(-2 * n * d * d);\n  return { d, pValue };\n}\n\n// Utility: Levene's test for heterogeneity of variance\nfunction leveneTest(values: number[], groups: string[]): { W: number, pValue: number } | null {\n  if (!values.length || !groups.length || values.length !== groups.length) return null;\n  const groupMap: { [key: string]: number[] } = {};\n  values.forEach((v, i) => {\n    if (!groupMap[groups[i]]) groupMap[groups[i]] = [];\n    groupMap[groups[i]].push(v);\n  });\n  const groupNames = Object.keys(groupMap);\n  if (groupNames.length < 2) return null;\n\n  // Calculate group medians\n  const medians = groupNames.map(name => {\n    const arr = groupMap[name].slice().sort((a, b) => a - b);\n    const mid = Math.floor(arr.length / 2);\n    return arr.length % 2 === 0 ? (arr[mid - 1] + arr[mid]) / 2 : arr[mid];\n  });\n\n  // Calculate absolute deviations from group medians\n  const absDevs: number[] = [];\n  const absDevsGroups: string[] = [];\n  groupNames.forEach((name, idx) => {\n    groupMap[name].forEach(v => {\n      absDevs.push(Math.abs(v - medians[idx]));\n      absDevsGroups.push(name);\n    });\n  });\n\n  // ANOVA on absDevs\n  const overallMean = absDevs.reduce((a, b) => a + b, 0) / absDevs.length;\n  const groupMeans = groupNames.map(name => {\n    const arr = absDevs.filter((_, i) => absDevsGroups[i] === name);\n    return arr.reduce((a, b) => a + b, 0) / arr.length;\n  });\n  const n = absDevs.length;\n  const k = groupNames.length;\n  const ssBetween = groupNames.reduce((sum, name, idx) => {\n    const arr = absDevs.filter((_, i) => absDevsGroups[i] === name);\n    return sum + arr.length * (groupMeans[idx] - overallMean) ** 2;\n  }, 0);\n  const ssWithin = absDevs.reduce((sum, val, i) => {\n    const groupIdx = groupNames.indexOf(absDevsGroups[i]);\n    return sum + (val - groupMeans[groupIdx]) ** 2;\n  }, 0);\n  const msBetween = ssBetween / (k - 1);\n  const msWithin = ssWithin / (n - k);\n  const W = msBetween / msWithin;\n\n  // p-value approximation (F-distribution)\n  // For simplicity, we just return W; for real p-value, use a stats library or table\n  return { W, pValue: NaN };\n}\n\n// Approximate the error function (erf)\nfunction erf(x: number): number {\n  // Abramowitz and Stegun formula 7.1.26\n  // with maximal error of 1.5 × 10−7\n  const sign = x >= 0 ? 1 : -1;\n  x = Math.abs(x);\n\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n  return sign * y;\n}\n\nexport default function AnalysisPage() {\n  const [file, setFile] = useState<File | null>(null);\n  const [data, setData] = useState<any[]>([]);\n  const [stats, setStats] = useState<DescriptiveStats | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  const [numericColumn, setNumericColumn] = useState<string | null>(null);\n  const [groupColumn, setGroupColumn] = useState<string | null>(null);\n\n  // New state for UI flow\n  const [showStats, setShowStats] = useState(false);\n  const [showHistogram, setShowHistogram] = useState(false);\n  const [ksResult, setKsResult] = useState<{ d: number, pValue: number } | null>(null);\n  const [leveneResult, setLeveneResult] = useState<{ W: number, pValue: number } | null>(null);\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile) {\n      setFile(uploadedFile);\n      setError('');\n      setData([]);\n      setStats(null);\n    }\n  };\n\n  const processFile = async () => {\n    if (!file) {\n      setError('Please select a file first');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer);\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n      if (jsonData.length === 0) {\n        setError('No data found in the file');\n        return;\n      }\n\n      setData(jsonData);\n    } catch (err) {\n      setError('Error processing file. Please ensure it\\'s a valid Excel file.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateDescriptiveStats = () => {\n    if (data.length === 0) {\n      setError('Please upload and process a file first');\n      return;\n    }\n\n    // Get the first numeric column\n    const firstRow = data[0];\n    const numericColumns = Object.keys(firstRow).filter(key => {\n      const value = firstRow[key];\n      return typeof value === 'number' && !isNaN(value);\n    });\n\n    if (numericColumns.length === 0) {\n      setError('No numeric columns found in the data');\n      return;\n    }\n\n    const columnName = numericColumns[0];\n    const values = data.map(row => row[columnName]).filter(val => typeof val === 'number' && !isNaN(val));\n\n    if (values.length === 0) {\n      setError('No valid numeric data found');\n      return;\n    }\n\n    // Calculate statistics\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    \n    const sortedValues = [...values].sort((a, b) => a - b);\n    const median = sortedValues.length % 2 === 0 \n      ? (sortedValues[sortedValues.length / 2 - 1] + sortedValues[sortedValues.length / 2]) / 2\n      : sortedValues[Math.floor(sortedValues.length / 2)];\n\n    // Calculate mode\n    const frequency: { [key: number]: number } = {};\n    values.forEach(val => {\n      frequency[val] = (frequency[val] || 0) + 1;\n    });\n    const maxFreq = Math.max(...Object.values(frequency));\n    const mode = Object.keys(frequency).filter(key => frequency[Number(key)] === maxFreq)[0];\n\n    // Calculate variance and standard deviation\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    setStats({\n      mean: Number(mean.toFixed(4)),\n      median: Number(median.toFixed(4)),\n      mode: Number(mode),\n      variance: Number(variance.toFixed(4)),\n      standardDeviation: Number(standardDeviation.toFixed(4)),\n      count: values.length,\n      min: Math.min(...values),\n      max: Math.max(...values)\n    });\n  };\n\n  // Handler for descriptive stats\n  const handleDescriptiveStats = () => {\n    if (!numericColumn) return;\n    const values = data\n      .map(row => row[numericColumn])\n      .filter((v: any) => typeof v === 'number' && !isNaN(v));\n    if (!values.length) return;\n\n    // Calculate statistics\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const sortedValues = [...values].sort((a, b) => a - b);\n    const median = sortedValues.length % 2 === 0 \n      ? (sortedValues[sortedValues.length / 2 - 1] + sortedValues[sortedValues.length / 2]) / 2\n      : sortedValues[Math.floor(sortedValues.length / 2)];\n    const frequency: { [key: number]: number } = {};\n    values.forEach(val => {\n      frequency[val] = (frequency[val] || 0) + 1;\n    });\n    const maxFreq = Math.max(...Object.values(frequency));\n    const mode = Object.keys(frequency).filter(key => frequency[Number(key)] === maxFreq)[0];\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    setStats({\n      mean: Number(mean.toFixed(4)),\n      median: Number(median.toFixed(4)),\n      mode: Number(mode),\n      variance: Number(variance.toFixed(4)),\n      standardDeviation: Number(standardDeviation.toFixed(4)),\n      count: values.length,\n      min: Math.min(...values),\n      max: Math.max(...values)\n    });\n    setShowStats(true);\n  };\n\n  // Handler for KS test\n  const handleKSTest = () => {\n    if (!numericColumn) return;\n    const values = data\n      .map(row => row[numericColumn])\n      .filter((v: any) => typeof v === 'number' && !isNaN(v));\n    if (!values.length) return;\n    setKsResult(ksTest(values));\n  };\n\n  // Handler for Levene's test\n  const handleLeveneTest = () => {\n    if (!numericColumn || !groupColumn) return;\n    const values = data\n      .map(row => row[numericColumn])\n      .filter((v: any) => typeof v === 'number' && !isNaN(v));\n    const groups = data.map(row => row[groupColumn]);\n    if (!values.length || !groups.length) return;\n    setLeveneResult(leveneTest(values, groups));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <BarChart3 className=\"h-8 w-8 text-green-600 mr-3\" />\n            <h1 className=\"text-3xl font-bold\">Statistical Analysis</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Upload your Excel file and perform descriptive statistical analysis. \n            Check for normality, heterogeneity, and descriptive statistics.\n          </p>\n        </div>\n\n        {/* File Upload Card */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Upload className=\"h-5 w-5 mr-2\" />\n              Upload Data File\n            </CardTitle>\n            <CardDescription>\n              Select an Excel (.xlsx) file containing your data\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                type=\"file\"\n                accept=\".xlsx,.xls\"\n                onChange={handleFileUpload}\n                className=\"flex-1\"\n              />\n              <Button \n                onClick={processFile} \n                disabled={!file || loading}\n                className=\"min-w-[120px]\"\n              >\n                {loading ? 'Processing...' : 'Process File'}\n              </Button>\n            </div>\n            \n            {file && (\n              <div className=\"text-sm text-muted-foreground\">\n                Selected file: {file.name}\n              </div>\n            )}\n\n            {error && (\n              <div className=\"text-red-600 text-sm bg-red-50 p-3 rounded\">\n                {error}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Data Preview */}\n        {data.length > 0 && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Data Preview</CardTitle>\n              <CardDescription>\n                First 5 rows of your uploaded data\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse border border-gray-300\">\n                  <thead>\n                    <tr className=\"bg-gray-50\">\n                      {Object.keys(data[0] || {}).map((header, index) => (\n                        <th key={index} className=\"border border-gray-300 px-4 py-2 text-left\">\n                          {header}\n                        </th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {data.slice(0, 5).map((row, rowIndex) => (\n                      <tr key={rowIndex}>\n                        {Object.values(row).map((value, colIndex) => (\n                          <td key={colIndex} className=\"border border-gray-300 px-4 py-2\">\n                            {String(value)}\n                          </td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"mt-4 text-sm text-muted-foreground\">\n                Total rows: {data.length}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Column selection - only after data is uploaded */}\n        {data.length > 0 && (\n          <Card className=\"mb-6 mt-8\">\n            <CardHeader>\n              <CardTitle>Select Columns for Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div>\n                  <label className=\"block mb-1 font-medium\">Numeric Column</label>\n                  <select\n                    className=\"border rounded px-2 py-1\"\n                    value={numericColumn ?? ''}\n                    onChange={e => setNumericColumn(e.target.value)}\n                  >\n                    <option value=\"\">Select column</option>\n                    {Object.keys(data[0] || {}).filter(\n                      key => typeof data[0][key] === 'number'\n                    ).map(col => (\n                      <option key={col} value={col}>{col}</option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block mb-1 font-medium\">Grouping Column (for heterogeneity)</label>\n                  <select\n                    className=\"border rounded px-2 py-1\"\n                    value={groupColumn ?? ''}\n                    onChange={e => setGroupColumn(e.target.value)}\n                  >\n                    <option value=\"\">None</option>\n                    {Object.keys(data[0] || {}).filter(\n                      key => typeof data[0][key] === 'string'\n                    ).map(col => (\n                      <option key={col} value={col}>{col}</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Grouped Test Buttons */}\n        {numericColumn && (\n          <div className=\"flex flex-wrap gap-6 mb-6 mt-4\">\n            <Button onClick={handleDescriptiveStats}>Descriptive Statistics</Button>\n            <Button onClick={() => setShowHistogram(true)}>Show Distribution</Button>\n            <Button onClick={handleKSTest}>Normality Test (KS)</Button>\n            {groupColumn && (\n              <Button onClick={handleLeveneTest}>Heterogeneity Test (Levene's)</Button>\n            )}\n          </div>\n        )}\n\n        {/* Descriptive Statistics Table */}\n        {showStats && stats && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Descriptive Statistics Results</CardTitle>\n              <CardDescription>\n                Statistical summary of your data\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse border border-gray-300\">\n                  <thead>\n                    <tr className=\"bg-gray-50\">\n                      <th className=\"border border-gray-300 px-4 py-2 text-left font-medium\">Statistic</th>\n                      <th className=\"border border-gray-300 px-4 py-2 text-left font-medium\">Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Count</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.count}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Mean</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.mean}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Median</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.median}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Mode</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.mode}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Variance</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.variance}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Standard Deviation</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.standardDeviation}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Minimum</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.min}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"border border-gray-300 px-4 py-2\">Maximum</td>\n                      <td className=\"border border-gray-300 px-4 py-2\">{stats.max}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Histogram */}\n        {showHistogram && numericColumn && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Distribution (Histogram)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {(() => {\n                const values = data\n                  .map(row => row[numericColumn])\n                  .filter((v: any) => typeof v === 'number' && !isNaN(v));\n                if (!values.length) return <div>No numeric data available.</div>;\n                const binCount = 10;\n                const min = Math.min(...values);\n                const max = Math.max(...values);\n                const binSize = (max - min) / binCount;\n                const bins = Array(binCount).fill(0);\n                values.forEach(val => {\n                  let idx = Math.floor((val - min) / binSize);\n                  if (idx === binCount) idx--;\n                  bins[idx]++;\n                });\n                const labels = bins.map((_, i) =>\n                  `${(min + i * binSize).toFixed(2)} - ${(min + (i + 1) * binSize).toFixed(2)}`\n                );\n                return (\n                  <Bar\n                    data={{\n                      labels,\n                      datasets: [{\n                        label: 'Frequency',\n                        data: bins,\n                        backgroundColor: 'rgba(54, 162, 235, 0.5)',\n                      }]\n                    }}\n                  />\n                );\n              })()}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* KS Test Result */}\n        {ksResult && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Normality Test (Kolmogorov-Smirnov)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div>KS Statistic: {ksResult.d.toFixed(4)}</div>\n              <div>p-value: {ksResult.pValue.toExponential(2)}</div>\n              <div>\n                {ksResult.pValue < 0.05\n                  ? \"Data is likely not normal (reject H₀ at 0.05)\"\n                  : \"Data is likely normal (fail to reject H₀ at 0.05)\"}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Levene's Test Result */}\n        {leveneResult && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Heterogeneity of Variance (Levene's Test)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div>Levene's W: {leveneResult.W.toFixed(4)}</div>\n              <div>\n                {leveneResult.pValue !== undefined && !isNaN(leveneResult.pValue)\n                  ? `p-value: ${leveneResult.pValue.toExponential(2)}`\n                  : \"p-value: (approximation not implemented)\"}\n              </div>\n              <div>\n                {leveneResult.W > 1\n                  ? \"Variances are likely heterogeneous\"\n                  : \"Variances are likely homogeneous\"}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}