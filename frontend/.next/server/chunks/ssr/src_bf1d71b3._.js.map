{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/frontend/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/frontend/src/components/ui/button.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,0RACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/frontend/src/components/ui/card.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }"],"names":[],"mappings":";;;;;;;;;AAEA;AAEA;AAJA;;;;AAMA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/frontend/src/components/ui/input.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }"],"names":[],"mappings":";;;;AAEA;AAEA;AAJA;;;;AASA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,gWACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/frontend/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  getStatisticalGuidance as getStatisticalGuidanceFlow,\n  type StatisticalGuidanceInput,\n  type StatisticalGuidanceOutput,\n} from '@/ai/flows/statistical-guide-flow';\nimport {\n  rbdAnalysisFlow as rbdAnalysisFlowGenkit,\n  rbdAnalysisInputSchema,\n} from '@/ai/flows/rbd-analysis-flow';\nimport { z } from 'zod';\nimport {\n  frbdAnalysisFlow as frbdAnalysisFlowGenkit,\n  frbdAnalysisInputSchema,\n} from '@/ai/flows/frbd-analysis-flow';\n\nexport async function getStatisticalGuidance(\n  input: StatisticalGuidanceInput\n): Promise<StatisticalGuidanceOutput> {\n  return await getStatisticalGuidanceFlow({...input});\n}\n\nexport async function generateRbdAnalysisSummary(\n  input: z.infer<typeof rbdAnalysisInputSchema>\n): Promise<string> {\n  return await rbdAnalysisFlowGenkit(input);\n}\n\nexport async function generateFrbdAnalysisSummary(\n  input: z.infer<typeof frbdAnalysisInputSchema>\n): Promise<string> {\n  return await frbdAnalysisFlowGenkit(input);\n}\n"],"names":[],"mappings":";;;;;;IAwBsB,6BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/frontend/src/app/rbd/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Upload, BarChart3, Info, Sparkles } from \"lucide-react\";\nimport * as XLSX from 'xlsx';\nimport { generateRbdAnalysisSummary } from '../actions';\n\n\nexport default function RbdPage() {\n  const [file, setFile] = useState<File | null>(null);\n  const [data, setData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  const [columnHeaders, setColumnHeaders] = useState<string[]>([]);\n  const [missingValuesCount, setMissingValuesCount] = useState<number>(0);\n\n  // State for AI summary\n  const [aiSummary, setAiSummary] = useState<string>('');\n  const [aiSummaryLoading, setAiSummaryLoading] = useState(false);\n  const [aiSummaryError, setAiSummaryError] = useState<string>('');\n\n  // State for RBD analysis\n  const [blockCol, setBlockCol] = useState<string>('');\n  const [factorCol, setFactorCol] = useState<string>('');\n  const [responseValueCol, setResponseValueCol] = useState<string>('');\n  const [responseVariableCol, setResponseVariableCol] = useState<string>('');\n  const [selectedResponseVariable, setSelectedResponseVariable] = useState<string>('');\n  const [uniqueResponseVariables, setUniqueResponseVariables] = useState<string[]>([]);\n  const [rbdResults, setRbdResults] = useState<any>(null);\n  const [rbdError, setRbdError] = useState<string>('');\n  const [rbdLoading, setRbdLoading] = useState(false);\n  const [isExplanationOpen, setIsExplanationOpen] = useState(false);\n  const [anovaSignificance, setAnovaSignificance] = useState<Record<string, boolean>>({});\n  const [analysisCompleted, setAnalysisCompleted] = useState(false);\n  const [showRawJson, setShowRawJson] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [countdown, setCountdown] = useState<number | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (rbdResults && rbdResults.plots) {\n      console.log('rbdResults.plots:', rbdResults.plots);\n    }\n  }, [rbdResults]);\n\n // Helper function to clean factor names\n const cleanFactorName = (name: string) => {\n  // Extracts content from Q('...') or Q(\"...\")\n  const qMatches = [...name.matchAll(/Q\\(['\"]([^\\'\\\"]*)['\"]\\)/g)];\n  if (qMatches.length > 0) {\n    const factors = qMatches.map(m => m[1]);\n    return [...new Set(factors)].join(':');\n  }\n\n  // Handles C(...) for cases without Q(...) inside, like C(my_factor)\n  const cMatch = name.match(/^C\\((.+)\\)$/);\n  if (cMatch) {\n    return cMatch[1];\n  }\n\n  return name; // Return original name if no patterns match\n};\n\n  const renderResultsTable = (data: string, isSignificant?: boolean) => {\n    try {\n        // First, try to see if it\\'s HTML content with a table\n        if (typeof data === 'string' && data.includes('<table')) {\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(data, 'text/html');\n            const table = doc.querySelector('table');\n\n            if (table) {\n                const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent?.trim() || '');\n                const rows = Array.from(table.querySelectorAll('tbody tr')).map(tr =>\n                    Array.from(tr.querySelectorAll('td, th')).map(cell => cell.textContent?.trim() || '')\n                );\n\n                if (headers.length > 0 || rows.length > 0) {\n                    return (\n                        <div className=\"overflow-x-auto mb-6\">\n                            <table className=\"w-full border-collapse border border-blue-300\">\n                                <thead className=\"bg-blue-50\">\n                                    <tr className=\"bg-blue-50\">\n                                        {headers.map((h, i) => <th key={`${h}-${i}`} className=\"border border-blue-300 px-4 py-2 text-left\">{h}</th>)}\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {rows.map((row, i) => (\n                                        <tr key={i}>\n                                            {row.map((cell, j) => <td key={`${i}-${j}`} className=\"border border-blue-300 px-4 py-2\">{cell}</td>)}\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    );\n                }\n            }\n        }\n        \n        let parsedData = JSON.parse(data);\n\n        if (isSignificant === false && Array.isArray(parsedData)) {\n            parsedData = parsedData.map(row => {\n                if (row.hasOwnProperty('Significance')) {\n                    return { ...row, Significance: 'NaN' };\n                }\n                return row;\n            });\n        }\n\n        // Case 1: Array of objects for Tukey/Mean Separation\n        if (Array.isArray(parsedData) && parsedData.length > 0) {\n            const headers = Object.keys(parsedData[0]);\n            \n            const sortedData = [...parsedData].sort((a, b) => {\n                const valA = a[headers[0]];\n                const valB = b[headers[0]];\n\n                if (typeof valA === 'string' && typeof valB === 'string') {\n                    return valA.localeCompare(valB);\n                }\n                if (typeof valA === 'number' && typeof valB === 'number') {\n                    return valA - valB;\n                }\n                return String(valA).localeCompare(String(valB));\n            });\n\n            return (\n                <div className=\"overflow-x-auto mb-6\">\n                    <table className=\"w-full border-collapse border border-blue-300\">\n                        <thead className=\"bg-blue-50\">\n                            <tr className=\"bg-blue-50\">\n                                {headers.map(h => <th key={h} className=\"border border-blue-300 px-4 py-2 text-left\">{h}</th>)}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {sortedData.map((row, i) => (\n                                <tr key={i}>\n                                    {headers.map(h => (\n                                        <td key={`${i}-${h}`} className=\"border border-blue-300 px-4 py-2\">\n                                            {h === 'reject'\n                                                ? String(row[h])\n                                                : (!isNaN(Number(row[h])) && row[h] !== null && String(row[h]).trim() !== ''\n                                                    ? Number(row[h]).toFixed(2)\n                                                    : String(row[h]))}\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        // Case 2: Object of objects for ANOVA-like tables\n        const headers = Object.keys(parsedData);\n        if (headers.length > 0 && typeof parsedData[headers[0]] === 'object' && parsedData[headers[0]] !== null && !Array.isArray(parsedData[headers[0]])) {\n            const rowKeys = Object.keys(parsedData[headers[0]]);\n            return (\n                <div className=\"overflow-x-auto mb-6\">\n                    <table className=\"w-full border-collapse border border-blue-300\">\n                        <thead className=\"bg-blue-50\">\n                            <tr className=\"bg-blue-50\">\n                                <th className=\"border border-blue-300 px-4 py-2 text-left\"></th>\n                                {headers.map(h => <th key={h} className=\"border border-blue-300 px-4 py-2 text-left\">{h}</th>)}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {rowKeys.map(key => (\n                                <tr key={key}>\n                                    <td className=\"border border-blue-300 px-4 py-2 font-medium\">{key}</td>\n                                    {headers.map(h => <td key={`${key}-${h}`} className=\"border border-blue-300 px-4 py-2\">{!isNaN(Number(parsedData[h][key])) && parsedData[h][key] !== null && String(parsedData[h][key]).trim() !== '' ? Number(parsedData[h][key]).toFixed(2) : String(parsedData[h][key])}</td>)}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        throw new Error(\"JSON data is not in a recognized table format.\");\n    } catch (e) {\n        return <div className=\"overflow-x-auto bg-blue-50 p-4 rounded-md mb-6\" dangerouslySetInnerHTML={{ __html: data }} />;\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const uploadedFile = event.target.files?.[0];\n    if (uploadedFile) {\n      setFile(uploadedFile);\n      setError('');\n      setData([]);\n      setRbdResults(null);\n    }\n  };\n\n  const handleReset = () => {\n    setFile(null);\n    setData([]);\n    setError('');\n    setBlockCol('');\n    setFactorCol('');\n    setResponseValueCol('');\n    setResponseVariableCol('');\n    setSelectedResponseVariable('');\n    setUniqueResponseVariables([]);\n    setRbdResults(null);\n    setRbdError('');\n    setRbdLoading(false);\n    setAnovaSignificance({});\n    setAnalysisCompleted(false);\n    setShowRawJson(false);\n    setAiSummary('');\n    setAiSummaryError('');\n    setAiSummaryLoading(false);\n    setMissingValuesCount(0);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = ''; // Clear the file input\n    }\n  };\n\n  const processFile = async () => {\n    if (!file) {\n      setError('Please select a file first');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer);\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { defval: null });\n\n      if (jsonData.length === 0) {\n        setError('No data found in the file');\n        return;\n      }\n      \n      let missingCount = 0;\n      jsonData.forEach(row => {\n        Object.values(row).forEach(value => {\n          if (value === null || value === undefined || value === '') {\n            missingCount++;\n          }\n        });\n      });\n      setMissingValuesCount(missingCount);\n\n      setData(jsonData);\n      setColumnHeaders(Object.keys(jsonData[0] || {}));\n    } catch (err) {\n      setError(\"Error processing file. Please ensure it\\'s a valid Excel file.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRbdAnalysis = async () => {\n    if (!file || !blockCol || !factorCol || !responseValueCol || (responseVariableCol && !selectedResponseVariable)) {\n      setRbdError('Please select a file and specify all required column names, and a response variable if a response variable column is selected.');\n      return;\n    }\n\n    let dataToAnalyze = data;\n\n    if (responseVariableCol && selectedResponseVariable) {\n      dataToAnalyze = data.filter(row => row[responseVariableCol]?.toString() === selectedResponseVariable);\n      if (dataToAnalyze.length === 0) {\n        setRbdError(`No data found for selected response variable: ${selectedResponseVariable}`);\n        return;\n      }\n    }\n\n    setRbdLoading(true);\n    setRbdError('');\n    setRbdResults(null);\n    setAnalysisCompleted(false);\n    setCountdown(30);\n\n    intervalRef.current = setInterval(() => {\n      setCountdown(prev => (prev ? prev - 1 : null));\n    }, 1000);\n\n    const formData = new FormData();\n    // Instead of appending the entire file, we\\'ll send the filtered data as JSON\n    formData.append('data', JSON.stringify(dataToAnalyze));\n    formData.append('block_col', blockCol);\n    formData.append('factor_col', factorCol);\n    formData.append('response_col', responseValueCol);\n\n    const rbdServiceUrl = process.env.NEXT_PUBLIC_RBD_SERVICE_URL;\n\n    if (!rbdServiceUrl) {\n      setRbdError('RBD service URL not configured');\n      setRbdLoading(false);\n      return;\n    }\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30-second timeout\n\n      const response = await fetch(rbdServiceUrl, {\n        method: 'POST',\n        body: formData,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Analysis failed');\n      }\n\n      const results = await response.json();\n      setRbdResults(results);\n      setAnalysisCompleted(true);\n      if (results.anova_table) {\n        try {\n          const parsedAnova = JSON.parse(results.anova_table);\n          const newAnovaSignificance: Record<string, boolean> = {};\n          const pValues = parsedAnova['PR(>F)'];\n          if (pValues) {\n            Object.keys(pValues).forEach(factor => {\n              const pValue = pValues[factor];\n              newAnovaSignificance[cleanFactorName(factor)] = pValue < 0.05;\n            });\n          }\n          setAnovaSignificance(newAnovaSignificance);\n        } catch (e) {\n          console.error(\"Could not parse anova_table to determine significance\", e);\n          setAnovaSignificance({});\n        }\n      }\n    } catch (err: any) {\n      if (err.name === 'AbortError') {\n        setRbdError('Request timed out. Please try again.');\n      } else {\n        setRbdError(err.message || 'An unexpected error occurred');\n      }\n    } finally {\n      setRbdLoading(false);\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      setCountdown(null);\n    }\n  };\n\n  const handleGenerateAiSummary = async () => {\n    if (!rbdResults) {\n      setAiSummaryError('Please run the RBD analysis first.');\n      return;\n    }\n\n    setAiSummaryLoading(true);\n    setAiSummaryError('');\n    setAiSummary('');\n\n    try {\n      const input = {\n        anova_table: rbdResults.anova_table,\n        tukey_results: JSON.stringify(rbdResults.tukey_results),\n        shapiro: rbdResults.shapiro,\n        mean_separation_results: JSON.stringify(rbdResults.mean_separation_results),\n        f_oneway_results: rbdResults.f_oneway_results,\n        overall_cv: rbdResults.overall_cv,\n        cd_value: rbdResults.cd_value,\n      };\n\n      const summary = await generateRbdAnalysisSummary(input);\n      setAiSummary(summary);\n    } catch (err: any) {\n      setAiSummaryError(err.message || 'Failed to generate AI summary.');\n    } finally {\n      setAiSummaryLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <BarChart3 className=\"h-8 w-8 text-blue-600 mr-3\" />\n            <h1 className=\"text-3xl font-bold\">RCBD Analysis</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Upload your Excel file and perform Randomized Complete Block Design (RCBD) analysis.\n          </p>\n        </div>\n\n                   \n        {/* File Upload Card */}\n        <Card className=\"mb-8 border border-blue-200 rounded-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Upload className=\"h-5 w-5 mr-2\" />\n              Upload Data File\n            </CardTitle>\n            <CardDescription>\n              Select an Excel (.xlsx) file containing your data (up to 5 MB)\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-sm\">\n                Before uploading check out the required data format.  \n                <Link href=\"/data_arrangement\" passHref>\n                  <Button variant=\"link\" className=\"p-1 h-auto ml-1, text-blue-600 hover:underline\">\n                  Read this to prepare your data.\n                  </Button>\n                </Link>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                type=\"file\"\n                accept=\".xlsx,.xls\"\n                onChange={handleFileUpload}\n                className=\"flex-1 bg-blue-50\"\n                ref={fileInputRef}\n              />\n              <Button \n                onClick={processFile} \n                disabled={!file || loading}\n                className=\"min-w-[120px]\"\n              >\n                {loading ? 'Processing...' : 'Process File'}\n              </Button>\n              <Button \n                onClick={handleReset} \n                variant=\"outline\"\n                disabled={!file && data.length === 0 && !rbdResults}\n                className=\"min-w-[120px]\"\n              >\n                Reset\n              </Button>\n            </div>\n            \n            {file && (\n              <div className=\"text-sm text-muted-foreground\">\n                Selected file: {file.name}\n              </div>\n            )}\n\n            {error && (\n              <div className=\"text-red-600 text-sm bg-red-50 p-3 rounded\">\n                {error}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n          {/* Data Preview */}\n          {data.length > 0 && (\n            <Card className=\"mb-8 border border-blue-200 rounded-lg\">\n              <CardHeader>\n                <CardTitle>Data Preview</CardTitle>\n                <CardDescription>First 5 rows of the uploaded data.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-blue-200\">\n                    <thead className=\"bg-blue-50\">\n                      <tr>\n                        {Object.keys(data[0] || {}).map((key) => (\n                          <th\n                            key={key}\n                            scope=\"col\"\n                            className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                          >\n                            {key}\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-blue-200\">\n                      {data.slice(0, 5).map((row, rowIndex) => (\n                        <tr key={rowIndex}>\n                          {Object.values(row).map((value: any, colIndex) => (\n                            <td\n                              key={colIndex}\n                              className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\"\n                            >\n                              {typeof value === 'number' ? value.toFixed(2) : value?.toString()}\n                            </td>\n                          ))}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"mt-4 text-sm text-muted-foreground\">\n                  Total rows: {data.length}\n                </div>\n                {missingValuesCount > 0 && (\n                  <div className=\"mt-2 text-sm text-yellow-600\">\n                    Warning: Found {missingValuesCount} missing value(s) in your data. Rows with missing values will be excluded from the analysis.\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* RBD Column Selection */}\n          {data.length > 0 && (\n              <Card className=\"mb-8 border border-blue-200 rounded-lg\">\n                <CardHeader>\n                  <CardTitle>RCBD Analysis Setup</CardTitle>\n                  <CardDescription>Specify the columns for the analysis.</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block mb-1 font-medium\">Block Column (eg. replication)</label>\n                      <select\n                          value={blockCol}\n                          onChange={e => setBlockCol(e.target.value)}\n                          className=\"block w-full p-2 border border-blue-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                      >\n                        <option value=\"\">Select a column</option>\n                        {columnHeaders.map(header => (\n                            <option key={header} value={header}>{header}</option>\n                        ))}\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block mb-1 font-medium\">Factor Column (eg, treatment)</label>\n                      <select\n                          value={factorCol}\n                          onChange={e => setFactorCol(e.target.value)}\n                          className=\"block w-full p-2 border border-blue-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                      >\n                        <option value=\"\">Select a column</option>\n                        {columnHeaders.map(header => (\n                            <option key={header} value={header}>{header}</option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block mb-1 font-medium\">Response Variable Column (Optional)</label>\n                      <select\n                          value={responseVariableCol}\n                          onChange={e => {\n                            setResponseVariableCol(e.target.value);\n                            setSelectedResponseVariable(''); // Reset selected variable when column changes\n                            if (e.target.value) {\n                              const uniqueValues = [...new Set(data.map(row => row[e.target.value]))].map(String);\n                              setUniqueResponseVariables(uniqueValues);\n                            } else {\n                              setUniqueResponseVariables([]);\n                            }\n                          }}\n                          className=\"block w-full p-2 border border-blue-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                      >\n                        <option value=\"\">Select a column for response variable</option>\n                        {columnHeaders.map(header => (\n                            <option key={header} value={header}>{header}</option>\n                        ))}\n                      </select>\n                    </div>\n                    {responseVariableCol && (\n                        <div>\n                          <label className=\"block mb-1 font-medium\">Select Response Variable </label>\n                          <select\n                              value={selectedResponseVariable}\n                              onChange={e => setSelectedResponseVariable(e.target.value)}\n                              className=\"block w-full p-2 border border-blue-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                          >\n                            <option value=\"\">Select a variable</option>\n                            {uniqueResponseVariables.map(variable => (\n                                <option key={variable} value={variable}>{variable}</option>\n                            ))}\n                          </select>\n                        </div>\n                    )}\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block mb-1 font-medium\">Response Value Column (eg. yield)</label>\n                      <select\n                          value={responseValueCol}\n                          onChange={e => setResponseValueCol(e.target.value)}\n                          className=\"block w-full p-2 border border-blue-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n                      >\n                        <option value=\"\">Select a column</option>\n                        {columnHeaders.map(header => (\n                            <option key={header} value={header}>{header}</option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                </CardContent>\n                <div className=\"px-6 pb-6\">\n                  <div className=\"flex items-center space-x-4\"> {/* Added flex container */}\n                    <Button\n                      onClick={handleRbdAnalysis}\n                      disabled={rbdLoading || !blockCol || !factorCol || !responseValueCol || (responseVariableCol && !selectedResponseVariable)}\n                    >\n                      {rbdLoading ? `Running Analysis... (${countdown}s)` : 'Run RCBD Analysis'}\n                    </Button>\n                    {analysisCompleted && !rbdLoading && (\n                      <div className=\"text-blue-600 text-sm bg-blue-50 p-3 rounded\"> {/* Removed mt-4 */}\n                        Analysis over. Results are below.\n                      </div>\n                    )}\n                  </div>\n                  {rbdError && (\n                    <div className=\"text-red-600 text-sm bg-red-50 p-3 rounded mt-4\">\n                      {rbdError}\n                    </div>\n                  )}\n                </div>\n              </Card>\n          )}\n\n          \n\n          {/* RBD Results */}\n          {rbdResults && (\n            <Card className=\"mb-8 border border-blue-200 rounded-lg\">\n              <CardHeader>\n                <CardTitle>Diagnostic Plots and Normality Test</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <h3 className=\"text-lg font-semibold mb-2\">Diagnostic Plots</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {rbdResults.plots.residuals_vs_fitted && (\n                    <div className=\"border p-2 rounded-md\">\n                      <h4 className=\"text-md font-medium mb-1\">Residuals vs Fitted</h4>\n                      <Image\n                        src={`data:image/png;base64,${rbdResults.plots.residuals_vs_fitted}`}\n                        alt=\"Residuals vs Fitted Plot\"\n                        width={500}\n                        height={300}\n                        className=\"w-full h-auto\"\n                      />\n                    </div>\n                  )}\n                  {rbdResults.plots.qq_plot && (\n                    <div className=\"border p-2 rounded-md\">\n                      <h4 className=\"text-md font-medium mb-1\">Normal Q-Q Plot</h4>\n                      <Image\n                        src={`data:image/png;base64,${rbdResults.plots.qq_plot}`}\n                        alt=\"Normal Q-Q Plot\"\n                        width={500}\n                        height={300}\n                        className=\"w-full h-auto\"\n                      />\n                    </div>\n                  )}\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Shapiro-Wilk Test for Normality of Residuals</h3>\n                {rbdResults.shapiro && (\n                  <div className=\"bg-blue-50 p-4 rounded-md mb-6\">\n                    <p><strong>Statistic:</strong> {rbdResults.shapiro.stat.toFixed(4)}</p>\n                    <p><strong>P-value:</strong> {rbdResults.shapiro.p.toFixed(4)}</p>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      {rbdResults.shapiro.p < 0.05\n                        ? \"Residuals are likely not normally distributed (p < 0.05).\"\n                        : \"Residuals appear to be normally distributed (p >= 0.05).\"}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {rbdResults && (\n            <Card className=\"mb-8 border border-blue-200 rounded-lg\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>RCBD Analysis Results</CardTitle>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setShowRawJson(!showRawJson)}>\n                    {showRawJson ? 'Hide' : 'Show'} Raw JSON\n                </Button>\n              </CardHeader>\n              {showRawJson && (\n                <CardContent>\n                    <pre className=\"p-4 bg-gray-100 rounded-md overflow-x-auto\">\n                    {JSON.stringify(rbdResults, null, 2)}\n                    </pre>\n                </CardContent>\n              )}\n              <CardContent>\n                <h3 className=\"text-lg font-semibold mb-2\">ANOVA Table</h3>\n                <div className=\"overflow-x-auto mb-6\">\n                  {rbdResults.anova_table && (() => {\n                    try {\n                      const parsedAnovaTable = JSON.parse(rbdResults.anova_table);\n                      const columnHeaders = Object.keys(parsedAnovaTable);\n                      const rowCount = columnHeaders.length > 0 ? Object.keys(parsedAnovaTable[columnHeaders[0]]).length : 0;\n\n                      if (rowCount === 0) {\n                        return <p>ANOVA table is empty or could not be parsed. Raw data: {rbdResults.anova_table}</p>;\n                      }\n\n                      return (\n                        <table className=\"w-full border-collapse border border-blue-300\">\n                          <thead>\n                            <tr className=\"bg-blue-50\">\n                              <th className=\"border border-blue-300 px-4 py-2 text-left\">Source of error</th>\n                              {columnHeaders.map((header, index) => (\n                                <th key={index} className=\"border border-blue-300 px-4 py-2 text-left\">\n                                  {header}\n                                </th>\n                              ))}\n                              <th className=\"border border-blue-300 px-4 py-2 text-left\">Significance</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {Object.keys(parsedAnovaTable[columnHeaders[0]]).map((rowIndex) => {\n                              const pValue = parsedAnovaTable['PR(>F)']?.[rowIndex];\n                              const showSignificance = pValue !== null && pValue !== undefined;\n\n                              return (\n                                <tr key={rowIndex}>\n                                  <td className=\"border border-blue-300 px-4 py-2 font-medium\">\n                                    {cleanFactorName(rowIndex)}\n                                  </td>\n                                  {columnHeaders.map((header, colIndex) => (\n                                    <td key={colIndex} className=\"border border-blue-300 px-4 py-2\">\n                                      {parsedAnovaTable[header][rowIndex]}\n                                    </td>\n                                  ))}\n                                  <td className=\"border border-blue-300 px-4 py-2\">\n                                    {showSignificance ? (pValue < 0.05 ? 'Significant' : 'Not significant') : ''}\n                                  </td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </table>\n                      );\n                    } catch (e) {\n                      console.error(\"Error parsing ANOVA table:\", e);\n                      return <p>Error loading ANOVA table. Raw data: {rbdResults.anova_table}</p>;\n                    }\n                  })()}\n                </div>\n\n                {rbdResults.overall_cv !== null && rbdResults.overall_cv !== undefined && (\n                    <div className=\"text-left text-sm text-muted-foreground mb-5\">\n                        Overall CV (%): {rbdResults.overall_cv.toFixed(2)}\n                    </div>\n                )}\n\n                <h3 className=\"text-lg font-semibold mb-2\">Tukey HSD Post-Hoc Tests</h3>\n                {rbdResults.tukey_results && Object.keys(rbdResults.tukey_results).map((factor) => (\n                  <div key={factor} className=\"mb-4\">\n                    <h4 className=\"text-md font-medium mb-1\">Factor: {cleanFactorName(factor)}</h4>\n                    {renderResultsTable(rbdResults.tukey_results[factor])}\n                  </div>\n                ))}\n\n                {rbdResults.tukey_explanation && (\n                  <div>\n                    <Button onClick={() => setIsExplanationOpen(!isExplanationOpen)} variant=\"link\">\n                      <Info className=\"h-4 w-4 mr-2\" /> \n                      {isExplanationOpen ? 'Hide' : 'Show'} Explanation of the Post-hoc table\n                    </Button>\n                    {isExplanationOpen && (\n                      <div className=\"prose prose-sm max-w-none mt-2\" dangerouslySetInnerHTML={{ __html: rbdResults.tukey_explanation }} />\n                    )}\n                  </div>\n                )}\n\n\n                <h3 className=\"text-lg font-semibold my-4\">Mean Separation Results</h3>\n                {rbdResults.mean_separation_results && Object.keys(rbdResults.mean_separation_results).map((factor) => {\n                  const cleanedFactorName = cleanFactorName(factor);\n                  return (\n                    <div key={factor} className=\"mb-4\">\n                      <h4 className=\"text-md font-medium mb-1\">Factor: {cleanedFactorName}</h4>\n                      {renderResultsTable(rbdResults.mean_separation_results[factor], anovaSignificance[cleanedFactorName])}\n                    </div>\n                  )\n                })}\n\n                {rbdResults.cd_value !== null && rbdResults.cd_value !== undefined && (\n                    <div className=\"text-left text-sm text-muted-foreground mb-5\">\n                        Critical Difference (CD): {rbdResults.cd_value.toFixed(2)}\n                    </div>\n                )}\n\n                \n                  <h3 className=\"text-lg font-semibold mb-2\">Mean Plots</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {rbdResults.plots.mean_bar_plot && (\n                      <div className=\"border p-2 rounded-md\">\n                        <h4 className=\"text-md font-medium mb-1\">Bar Plot</h4>\n                        <Image\n                          src={`data:image/png;base64,${rbdResults.plots.mean_bar_plot}`}\n                          alt=\"Bar Plot\"\n                          width={500}\n                          height={300}\n                          className=\"w-full h-auto\"\n                        />\n                      </div>\n                    )}\n\n                    {rbdResults.plots.mean_box_plot && (\n                      <div className=\"border p-2 rounded-md\">\n                        <h4 className=\"text-md font-medium mb-1\">Box Plot</h4>\n                        <Image\n                          src={`data:image/png;base64,${rbdResults.plots.mean_box_plot}`}\n                          alt=\"Box Plot\"\n                          width={500}\n                          height={300}\n                          className=\"w-full h-auto\"\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  </CardContent>\n            </Card>\n          )}\n      \n      {rbdResults && (\n            <Card className=\"mb-8 border border-blue-200 rounded-lg\">\n              <CardHeader>\n                <CardTitle>AI-Powered Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Button onClick={handleGenerateAiSummary} disabled={aiSummaryLoading}>\n                  <Sparkles className=\"h-4 w-4 mr-2\" />\n                  {aiSummaryLoading ? 'Generating Summary...' : 'Generate AI Summary'}\n                </Button>\n                {aiSummaryError && (\n                  <div className=\"text-red-600 text-sm bg-red-50 p-3 rounded mt-4\">\n                    {aiSummaryError}\n                  </div>\n                )}\n                {aiSummary && (\n                  <div className=\"prose prose-sm max-w-none mt-4\" dangerouslySetInnerHTML={{ __html: aiSummary.replace(/\\n/g, '<br />') }} />\n                )}\n              </CardContent>\n            </Card>\n          )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}