{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;;;;;;;;;AAEO,MAAM,KAAK,CAAA,GAAA,4GAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/ai/flows/statistical-guide-flow.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A flow to provide statistical guidance based on a knowledge base.\n *\n * - getStatisticalGuidance - A function that takes a user's question and returns an answer based on a curated knowledge base.\n * - StatisticalGuidanceInput - The input type for the getStatisticalGuidance function.\n * - StatisticalGuidanceOutput - The return type for the getStatisticalGuidance function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport fs from 'fs';\nimport path from 'path';\n\nconst StatisticalGuidanceInputSchema = z.object({\n  question: z.string().describe('The user\\'s question about statistics.'),\n});\nexport type StatisticalGuidanceInput = z.infer<typeof StatisticalGuidanceInputSchema>;\n\nconst StatisticalGuidanceOutputSchema = z.object({\n  answer: z.string().describe('The AI-generated answer to the user\\'s question, based on the provided knowledge base.'),\n});\nexport type StatisticalGuidanceOutput = z.infer<typeof StatisticalGuidanceOutputSchema>;\n\nexport async function getStatisticalGuidance(input: StatisticalGuidanceInput): Promise<StatisticalGuidanceOutput> {\n  process.env.NEXT_PUBLIC_GOOGLE_API_KEY\n  return statisticalGuidanceFlow(input);\n}\n\n// Function to read knowledge base files\nfunction getKnowledgeBase(): string {\n  const dataDir = path.join(process.cwd(), 'src', 'ai', 'data');\n  const fileNames = [\n    'Guide_statistics_1.md',\n    'common_mistakes_statistics.md',\n    'common_statistical_tools.md',\n    'field_trial_designs.md',\n  ];\n\n  const knowledgeBase = fileNames\n    .map(fileName => {\n      try {\n        return fs.readFileSync(path.join(dataDir, fileName), 'utf-8');\n      } catch (error) {\n        console.error(`Error reading file ${fileName}:`, error);\n        return ''; // Return empty string if a file is not found or fails to read\n      }\n    })\n    .join('\\n\\n---\\n\\n'); // Separate file contents clearly\n\n  return knowledgeBase;\n}\n\n\nconst prompt = ai.definePrompt({\n  name: 'statisticalGuidancePrompt',\n  input: {schema: z.object({\n      question: z.string(),\n      knowledgeBase: z.string(),\n  })},\n  output: {schema: StatisticalGuidanceOutputSchema},\n  prompt: `You are a helpful and expert AI assistant specializing in statistical methods. Your role is to provide clear and accurate guidance on statistical methods for agricultural research.\n\n  Use the provided \"Knowledge Base\" as your primary source of truth to answer the user's question. Synthesize the information from the knowledge base to formulate a conversational and helpful response in your own words.\n  \n  Do not simply copy text from the knowledge base. Your goal is to explain the concepts to the user as an expert would.\n  \n  If the answer to the question cannot be found in the knowledge base, state clearly and politely that you do not have information on that specific topic based on your provided documents. Do not use external knowledge or make assumptions.\n  \n  Try to understand the context from user's previous questions.\n\n  If you are not sure about the question ask for clarification.\n\n  Always maintain a warm and professional tone in your responses.\n\n  Knowledge Base:\n  ---\n  {{{knowledgeBase}}}\n  ---\n\n  User's Question:\n  \"{{{question}}}\"\n\n  Answer:\n  `,\n});\n\nconst statisticalGuidanceFlow = ai.defineFlow(\n  {\n    name: 'statisticalGuidanceFlow',\n    inputSchema: StatisticalGuidanceInputSchema,\n    outputSchema: StatisticalGuidanceOutputSchema,\n  },\n  async (input) => {\n    const knowledgeBase = getKnowledgeBase()\n    const {output} = await prompt({ ...input, knowledgeBase });\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,iCAAiC,4GAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,UAAU,4GAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,kCAAkC,4GAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,QAAQ,4GAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,uBAAuB,KAA+B;;IAE1E,OAAO,wBAAwB;AACjC;AAEA,wCAAwC;AACxC,SAAS;IACP,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,MAAM;IACtD,MAAM,YAAY;QAChB;QACA;QACA;QACA;KACD;IAED,MAAM,gBAAgB,UACnB,GAAG,CAAC,CAAA;QACH,IAAI;YACF,OAAO,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,SAAS,WAAW;QACvD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC,EAAE;YACjD,OAAO,IAAI,8DAA8D;QAC3E;IACF,GACC,IAAI,CAAC,gBAAgB,iCAAiC;IAEzD,OAAO;AACT;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,4GAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACrB,UAAU,4GAAA,CAAA,IAAC,CAAC,MAAM;YAClB,eAAe,4GAAA,CAAA,IAAC,CAAC,MAAM;QAC3B;IAAE;IACF,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;EAuBT,CAAC;AACH;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,gBAAgB;IACtB,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;QAAE,GAAG,KAAK;QAAE;IAAc;IACxD,OAAO;AACT;;;IAzEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/ai/flows/rbd-analysis-flow.ts"],"sourcesContent":["import { z } from 'zod';\nimport { ai } from '../genkit';\n\nconst anovaTableSchema = z.string();\nconst tukeyResultsSchema = z.string();\nconst shapiroSchema = z.object({\n  stat: z.number(),\n  p: z.number(),\n});\nconst meanSeparationResultsSchema = z.string();\nconst fOnewayResultsSchema = z.string();\n\nexport const rbdAnalysisInputSchema = z.object({\n  anova_table: anovaTableSchema,\n  tukey_results: tukeyResultsSchema,\n  shapiro: shapiroSchema,\n  mean_separation_results: meanSeparationResultsSchema,\n  f_oneway_results: fOnewayResultsSchema,\n  overall_cv: z.number(),\n  cd_value: z.number().nullable(),\n});\n\n\nexport const rbdAnalysisFlow = ai.defineFlow(\n  {\n    name: 'rbdAnalysisFlow',\n    inputSchema: rbdAnalysisInputSchema,\n    outputSchema: z.string(),\n  },\n  async (input) => {\n    // Ensure input.anova_table exists and is a string\n    if (!input.anova_table || typeof input.anova_table !== 'string') {\n        throw new Error('anova_table must be a valid string');\n    }\n    \n    // Parse JSON strings for better AI interpretation\n    let parsedTukeyResults;\n    try {\n      parsedTukeyResults = JSON.parse(input.tukey_results);\n    } catch (e) {\n      console.error(\"Error parsing tukey_results:\", e);\n      parsedTukeyResults = input.tukey_results; // Fallback to raw string if parsing fails\n    }\n\n    let parsedMeanSeparationResults;\n    try {\n      parsedMeanSeparationResults = JSON.parse(input.mean_separation_results);\n    } catch (e) {\n      console.error(\"Error parsing mean_separation_results:\", e);\n      parsedMeanSeparationResults = input.mean_separation_results; // Fallback to raw string if parsing fails\n    }\n\n    // Helper to format results with significance letters\n    const formatResultsWithLetters = (results: any) => {\n      if (Array.isArray(results) && results.length > 0) {\n        // Assuming 'Significance' or 'Group' column holds the letters\n        const hasSignificance = results[0].hasOwnProperty('Significance');\n        const hasGroup = results[0].hasOwnProperty('Group');\n\n        if (hasSignificance || hasGroup) {\n          return results.map((row: any) => {\n            const treatment = row[Object.keys(row)[0]]; // First column is usually treatment name\n            const mean = row[Object.keys(row)[1]]; // Second column is usually mean\n            const letters = hasSignificance ? row.Significance : row.Group;\n            return `${treatment}: ${mean} (${letters})`;\n          }).join('\\n');\n        }\n      }\n      return JSON.stringify(results, null, 2); // Fallback to pretty-printed JSON\n    };\n\n    let prompt = 'You are a senior agricultural research statistician with expertise in analyzing field trial data.\\n';\n    prompt += 'Your task is to interpret the results of a Randomized Block Design (RBD) analysis and provide a comprehensive, easy-to-understand summary for a researcher. Do not use \"I\" or \"you\" in your interpretations.\\n\\n';\n    prompt += 'Here is the data from the analysis:\\n\\n';\n    prompt += '1. **ANOVA Table:**\\n';\n    prompt += '```json\\n';\n    prompt += input.anova_table;\n    prompt += '\\n```\\n\\n';\n    prompt += '2.  **Tukey HSD Post-hoc Test Results:**\\n';\n    prompt += '```\\n';\n    prompt += formatResultsWithLetters(parsedTukeyResults);\n    prompt += '\\n```\\n\\n';\n    prompt += '3.  **Shapiro-Wilk Test for Normality of Residuals:**\\n';\n    prompt += '- Statistic: ' + input.shapiro.stat + '\\n';\n    prompt += '- P-value: ' + input.shapiro.p + '\\n\\n';\n    prompt += '4.  **Mean Separation Results (Treatment Means):**\\n';\n    prompt += '```\\n';\n    prompt += formatResultsWithLetters(parsedMeanSeparationResults);\n    prompt += '\\n```\\n\\n';\n    prompt += '5.  **F-Oneway Results:**\\n';\n    prompt += '```json\\n';\n    prompt += input.f_oneway_results;\n    prompt += '\\n```\\n\\n';\n    prompt += '6.  **Overall Coefficient of Variation (CV):** ' + input.overall_cv.toFixed(2) + '%\\n\\n';\n    prompt += '7.  **Critical Difference (CD) Value:** ' + (input.cd_value ? input.cd_value.toFixed(4) : 'Not available') + '\\n\\n';\n    prompt += '--- \\n\\n';\n    prompt += '**Please provide the following in your interpretation:**\\n\\n';\n    prompt += 'Disclaimer: This summary is generated using AI tools and there may be mistakes. It is crucial to verify the results with a qualified statistician before making any decisions based on this interpretation.\\n\\n';\n    prompt += 'A.  **ASSUMPTIONS OF RBD:**\\n';\n    prompt += '- Start with a clear heading: \"Model Assumptions\".\\n';\n    prompt += '- Based on the Shapiro-Wilk test P-value, conclude whether the model\\'s residuals are normally distributed. A p-value > 0.05 indicates that the residuals are normally distributed, and the assumption is met.\\n\\n';\n    prompt += 'B.  **OVERALL MODEL INTERPRETATION:**\\n';\n    prompt += '- Start with a clear heading: \"Overall Model Interpretation\".\\n';\n    prompt += '- Based on the ANOVA table, state whether there are any significant differences among the treatments and blocks. Explain what the F-statistic and P-value for the treatment factor mean in this context.\\n';\n    prompt += '- Comment on the model\\'s fit and reliability using the Coefficient of Variation (CV). A CV less than 10% is excellent, 10-20% is good, and above 20% may indicate high variability.\\n\\n';\n    prompt += 'C.  **TREATMENT PERFORMANCE:**\\n';\n    prompt += '- Start with a clear heading: \"Treatment Performance\".\\n';\n    prompt += '- Using the Mean Separation Results and Tukey HSD results, identify which treatments performed best.\\n';\n    prompt += '- List the treatments from best to worst based on their means. Add the standard error of mean (SEM) values to the mean values with plus or minus sign. Add alphabetical letters from mean separation results. eg. \"89.76 ± 2.50 ab\" \\n';\n    prompt += '- Clearly explain which treatment means are statistically different from each other and which are not, referencing the significance letters or p-values from the Tukey test.\\n\\n';\n   \n    prompt += 'D.  **Conclusion and Recommendations:**\\n';\n    prompt += '- Start with a clear heading: \"Conclusion and Recommendations\".\\n';\n    prompt += '- Provide a concise, overall conclusion about the treatment effects.\\n';\n    prompt += '- Recommend the best-performing treatment(s) for future research or application, based on the statistical evidence.\\n\\n';\n    prompt += 'Structure your response using clear headings and bullet points to make it easy to read and understand.\\n';\n\n    const llmResponse = await ai.generate({\n      prompt: prompt,\n      model: 'googleai/gemini-2.0-flash',\n      config: {\n        temperature: 0.3,\n      },\n    });\n\n    return llmResponse.text;\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/ai/flows/frbd-analysis-flow.ts"],"sourcesContent":["import { z } from 'zod';\nimport { ai } from '../genkit';\n\nconst anovaTableSchema = z.string();\nconst tukeyResultsSchema = z.record(z.string());\nconst shapiroSchema = z.object({\n  stat: z.number(),\n  p: z.number(),\n});\nconst meanSeparationResultsSchema = z.record(z.string());\n\nexport const frbdAnalysisInputSchema = z.object({\n  anova_table: anovaTableSchema,\n  tukey_results: tukeyResultsSchema,\n  shapiro: shapiroSchema,\n  mean_separation_results: meanSeparationResultsSchema,\n  overall_cv: z.number(),\n  cd_value: z.number().nullable(),\n});\n\n\nexport const frbdAnalysisFlow = ai.defineFlow(\n  {\n    name: 'frbdAnalysisFlow',\n    inputSchema: frbdAnalysisInputSchema,\n    outputSchema: z.string(),\n  },\n  async (input) => {\n    if (!input.anova_table || typeof input.anova_table !== 'string') {\n        throw new Error('anova_table must be a valid string');\n    }\n\n    const formatResultsWithLetters = (results: any) => {\n        try {\n            const parsed = JSON.parse(results);\n            if (Array.isArray(parsed) && parsed.length > 0) {\n                const hasSignificance = parsed[0].hasOwnProperty('Significance');\n                const hasGroup = parsed[0].hasOwnProperty('Group');\n\n                if (hasSignificance || hasGroup) {\n                    return parsed.map((row: any) => {\n                        const treatment = row[Object.keys(row)[0]];\n                        const mean = row[Object.keys(row)[1]];\n                        const letters = hasSignificance ? row.Significance : row.Group;\n                        return `${treatment}: ${mean} (${letters})`;\n                    }).join('\\n');\n                }\n            }\n            return JSON.stringify(parsed, null, 2);\n        } catch (e) {\n            return results; // Fallback to raw string if parsing fails\n        }\n    };\n\n    let prompt = 'You are a senior agricultural research statistician with expertise in analyzing field trial data.\\n';\n    prompt += 'Your task is to interpret the results of a Factorial Randomized Block Design (FRBD) analysis and provide a comprehensive, easy-to-understand summary for a researcher. Do not use \"I\" or \"you\" in your interpretations.\\n\\n';\n    prompt += 'Here is the data from the analysis:\\n\\n';\n    prompt += '1. **ANOVA Table:**\\n';\n    prompt += '```json\\n';\n    prompt += input.anova_table;\n    prompt += '\\n```\\n\\n';\n    prompt += '2.  **Tukey HSD Post-hoc Test Results:**\\n';\n    Object.entries(input.tukey_results).forEach(([factor, results]) => {\n        prompt += `*   **Factor: ${factor}**\\n`;\n        prompt += '    ```\\n';\n        prompt += formatResultsWithLetters(results);\n        prompt += '\\n    ```\\n';\n    });\n    prompt += '\\n';\n    prompt += '3.  **Shapiro-Wilk Test for Normality of Residuals:**\\n';\n    prompt += '- Statistic: ' + input.shapiro.stat + '\\n';\n    prompt += '- P-value: ' + input.shapiro.p + '\\n\\n';\n    prompt += '4.  **Mean Separation Results (Treatment Means):**\\n';\n    Object.entries(input.mean_separation_results).forEach(([factor, results]) => {\n        prompt += `*   **Factor: ${factor}**\\n`;\n        prompt += '    ```\\n';\n        prompt += formatResultsWithLetters(results);\n        prompt += '\\n    ```\\n';\n    });\n    prompt += '\\n';\n    prompt += '5.  **Overall Coefficient of Variation (CV):** ' + input.overall_cv.toFixed(2) + '%\\n\\n';\n    prompt += '6.  **Critical Difference (CD) Value:** ' + (input.cd_value ? input.cd_value.toFixed(4) : 'Not available') + '\\n\\n';\n    prompt += '--- \\n\\n';\n    prompt += '**Please provide the following in your interpretation:**\\n\\n';\n    prompt += 'Disclaimer: This summary is generated using AI tools and there may be mistakes. It is crucial to verify the results with a qualified statistician before making any decisions based on this interpretation.\\n\\n';\n    prompt += 'A.  **ASSUMPTIONS OF FRBD:**\\n';\n    prompt += '- Start with a clear heading: \"Model Assumptions\".\\n';\n    prompt += '- Based on the Shapiro-Wilk test P-value, conclude whether the model\\'s residuals are normally distributed. A p-value > 0.05 indicates that the residuals are normally distributed, and the assumption is met.\\n\\n';\n    prompt += 'B.  **OVERALL MODEL INTERPRETATION:**\\n';\n    prompt += '- Start with a clear heading: \"Overall Model Interpretation\".\\n';\n    prompt += '- Based on the ANOVA table, state whether there are any significant main effects (for each factor) and interaction effects. Explain what the F-statistic and P-value for each factor and their interaction mean in this context.\\n';\n    prompt += '- Comment on the model\\'s fit and reliability using the Coefficient of Variation (CV). A CV less than 10% is excellent, 10-20% is good, and above 20% may indicate high variability.\\n\\n';\n    prompt += 'C.  **FACTOR PERFORMANCE:**\\n';\n    prompt += '- Start with a clear heading: \"Factor Performance\".\\n';\n    prompt += '- For each factor, using the Mean Separation Results and Tukey HSD results, identify which levels performed best.\\n';\n    prompt += '- List the levels from best to worst based on their means. Add the standard error of mean (SEM) values to the mean values with plus or minus sign. Add alphabetical letters from mean separation results. eg. eg. \"89.76 ± 2.50 ab\" \\n';\n    prompt += '- Clearly explain which level means are statistically different from each other and which are not, referencing the significance letters from the Tukey test.\\n';\n    prompt += '- If the interaction is significant, explain the interaction effect. Describe how the effect of one factor changes across the levels of the other factor.\\n\\n';\n    prompt += 'D.  **Conclusion and Recommendations:**\\n';\n    prompt += '- Start with a clear heading: \"Conclusion and Recommendations\".\\n';\n    prompt += '- Provide a concise, overall conclusion about the main effects and interaction effects.\\n';\n    prompt += '- Recommend the best-performing levels or combination of levels for future research or application, based on the statistical evidence.\\n\\n';\n    prompt += 'Structure your response using clear headings and bullet points to make it easy to read and understand.\\n';\n\n    const llmResponse = await ai.generate({\n      prompt: prompt,\n      model: 'googleai/gemini-2.0-flash',\n      config: {\n        temperature: 0.3,\n      },\n    });\n\n    return llmResponse.text;\n  }\n);"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {\n  getStatisticalGuidance as getStatisticalGuidanceFlow,\n  type StatisticalGuidanceInput,\n  type StatisticalGuidanceOutput,\n} from '@/ai/flows/statistical-guide-flow';\nimport {\n  rbdAnalysisFlow as rbdAnalysisFlowGenkit,\n  rbdAnalysisInputSchema,\n} from '@/ai/flows/rbd-analysis-flow';\nimport { z } from 'zod';\nimport {\n  frbdAnalysisFlow as frbdAnalysisFlowGenkit,\n  frbdAnalysisInputSchema,\n} from '@/ai/flows/frbd-analysis-flow';\n\nexport async function getStatisticalGuidance(\n  input: StatisticalGuidanceInput\n): Promise<StatisticalGuidanceOutput> {\n  return await getStatisticalGuidanceFlow({...input});\n}\n\nexport async function generateRbdAnalysisSummary(\n  input: z.infer<typeof rbdAnalysisInputSchema>\n): Promise<string> {\n  return await rbdAnalysisFlowGenkit(input);\n}\n\nexport async function generateFrbdAnalysisSummary(\n  input: z.infer<typeof frbdAnalysisInputSchema>\n): Promise<string> {\n  return await frbdAnalysisFlowGenkit(input);\n}\n"],"names":[],"mappings":";;;;;;;AAGA;AAKA;AAKA;;;;;;;;;;;;;AAKO,eAAe,uBACpB,KAA+B;IAE/B,OAAO,MAAM,CAAA,GAAA,kJAAA,CAAA,yBAA0B,AAAD,EAAE;QAAC,GAAG,KAAK;IAAA;AACnD;AAEO,eAAe,2BACpB,KAA6C;IAE7C,OAAO,MAAM,CAAA,GAAA,6IAAA,CAAA,kBAAqB,AAAD,EAAE;AACrC;AAEO,eAAe,4BACpB,KAA8C;IAE9C,OAAO,MAAM,CAAA,GAAA,8IAAA,CAAA,mBAAsB,AAAD,EAAE;AACtC;;;IAhBsB;IAMA;IAMA;;AAZA,+OAAA;AAMA,+OAAA;AAMA,+OAAA","debugId":null}},
    {"offset": {"line": 561, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/.next-internal/server/app/frbd/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateFrbdAnalysisSummary as '4050fc074b235e5371c338fb7cc10a8d35ed97edad'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/app/frbd/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/frbd/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/frbd/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 644, "column": 0}, "map": {"version":3,"sources":["file:///Users/gajendrababubaktavachalam/WebApps/statviz/stats/src/app/frbd/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/frbd/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/frbd/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","debugId":null}},
    {"offset": {"line": 658, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}